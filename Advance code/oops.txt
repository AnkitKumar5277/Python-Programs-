#oops example
'''
class Number:
  def sum(self):
    return self.a + self.b
n = Number() # object instantiation
n.a = 4
n.b = 6 
s = n.sum()
print(s)
'''

# PascalCase
'''EmployeeName''' # used in class

# camelCase
'''isNumeric, isFloat'''

# class
'''
class Employee:
include methods & variables'''

# object
'''
class RailwayForm:
  formType = "RailwayForm"
  def printData(self): # using self
    print(f"Name is {self.name}")
    print(f"Train is {self.train}")
    
ankitApp = RailwayForm() # class ka object
ankitApp.name = "ankit"
ankitApp.train = "Rajdhani Express"
ankitApp.printData() # print
'''
# another example
''''
class Remote():
  pass
class Player:
  def moveRight(self):
    pass
  def moveLeft(self):
    pass
  def moveTop(self):
    remobj = Remote() #instantiation
    playobj = Player()
    
    if(remobj.isLeftPressed()):
      playobj.moveLeft()
'''

# class Attribute
'''
class Employee:
  company = "Google"
ankit = Employee() # class ka obj
kumar = Employee() # object instantiation
print(ankit.company) # ankit ki company
print(kumar.company) # class attribute

Employee.company = "Microsoft" # change class attribute

print(ankit.company)
print(kumar.company)
'''
#instance attribute
'''
class Employee:
  company = "Facebook" #object
  salary = 100         #object                 #2

jack = Employee() # object instantiation
oggy = Employee() # object instantiation

jack.salary = 800 # instantce attribute         #1
# ise object ka attribute bhi khete hai
# object se associate karde

# print(jack.company) # class attribute
# print(oggy.company) # class att ribute

print(jack.salary) # print by instance attribue #1
print(oggy.salary) #                   print by #2

# print(jack.address) -> error address is not present in instance / class attribue
'''

# self
'''
class Employee:
  company = "IBM"
  def getSalary(self):
    print(f"employee of {self.company} is {self.salary}")

ankit = Employee()
ankit.salary = 100000
ankit.getSalary() # Employee.getSalary(ankit) #print the function components
'''

# static method
'''
class Person:
  company = "Adobe"
  @staticmethod
  def greet():
    print("Good Morining, Sir")

ankit = Person()
# ankit.salary = 100000
# ankit.greet() #Person.greet(ankit)
Person.greet() #--> this is the statice method run code
# or ankit.greet()
'''

# another example
'''
class Employee:
  company = "META"
  def getsalary(self, signature):
    print(f"salary of emoplyee {self.company} is {self.salary}\n{signature}")
  @staticmethod
  def greet():
    print("Good Morning, Sir")
  
  @staticmethod
  def time():
    print("10 am")

ankit = Employee()
ankit.salary = 100000
ankit.getsalary("Thanks") # signature passed
ankit.greet() # Employee.greet()
ankit.time()
'''

# constructor
'''
class Employee:
  def __init__(self, name):
    self.name = name

ankit = Employee("ankit kumar")
ankit.getDetails()
'''

# another example
class Employee:
    company = "Google"
    def __init__(self, name, salary, subunit):
        self.name = name
        self.salary = salary
        self.subunit = subunit
        print("Employee is created!") 
    
    def getDetails(self):
        print(f"The name of the employee is {self.name}")
        print(f"The salary of the employee is {self.salary}")
        print(f"The subunit of the employee is {self.subunit}")
        
harry = Employee("Harry", 100, "YouTube")
# harry = Employee() --> This throws an error (missing 3 required positional arguments:)
harry.getDetails()

